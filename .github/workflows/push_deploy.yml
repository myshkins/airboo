name: build-push-deploy
run-name: ${{ github.actor }} is running deploy
on:
  push:
    tags:
      - v0*
      - v1*

env:
  REGISTRY: ghcr.io

jobs:
  build-push-api:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: make env file
        run: |
          echo ${{ secrets.ENV }}" >> .env

      - run: cat .env

      - name: login to github packages
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/api
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push airboo api image
        uses: docker/build-push-action@v4
        with:
          context: services/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-push-app:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: make env file
        run: |
          echo "_AIRFLOW_WWW_USER_USERNAME=${{ secrets._AIRFLOW_WWW_USER_USERNAME }}" >> .env
          echo "_AIRFLOW_WWW_USER_PASSWORD=${{ secrets._AIRFLOW_WWW_USER_PASSWORD }}" >> .env
          echo "AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${{ secrets.AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION }}" >> .env
          echo "AIRFLOW_UID=${{ secrets.AIRFLOW_UID }}" >> .env
          echo "AIRFLOW__CORE__EXECUTOR=${{ secrets.AIRFLOW__CORE__EXECUTOR }}" >> .env
          echo "AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${{ secrets.AIRFLOW__DATABASE__SQL_ALCHEMY_CONN }}" >> .env
          echo "DEV_MODE=${{ secrets.DEV_MODE }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_URI=${{ secrets.POSTGRES_URI }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "SQLALCHEMY_DATABASE_URI=${{ secrets.SQLALCHEMY_DATABASE_URI }}" >> .env

      - name: login to github packages
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push airboo app image
        uses: docker/build-push-action@v4
        with:
          context: services/frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-push-postgres:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: make env file
        run:  |
          echo "_AIRFLOW_WWW_USER_USERNAME=${{ secrets._AIRFLOW_WWW_USER_USERNAME }}" >> .env
          echo "_AIRFLOW_WWW_USER_PASSWORD=${{ secrets._AIRFLOW_WWW_USER_PASSWORD }}" >> .env
          echo "AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${{ secrets.AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION }}" >> .env
          echo "AIRFLOW_UID=${{ secrets.AIRFLOW_UID }}" >> .env
          echo "AIRFLOW__CORE__EXECUTOR=${{ secrets.AIRFLOW__CORE__EXECUTOR }}" >> .env
          echo "AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${{ secrets.AIRFLOW__DATABASE__SQL_ALCHEMY_CONN }}" >> .env
          echo "DEV_MODE=${{ secrets.DEV_MODE }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_URI=${{ secrets.POSTGRES_URI }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "SQLALCHEMY_DATABASE_URI=${{ secrets.SQLALCHEMY_DATABASE_URI }}" >> .env     

      - name: login to github packages
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/postgres
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push airboo postgres image
        uses: docker/build-push-action@v4
        with:
          context: services/postgres
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-push-airflow:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: make env file
        run: |
          echo "_AIRFLOW_WWW_USER_USERNAME=${{ secrets._AIRFLOW_WWW_USER_USERNAME }}" >> .env
          echo "_AIRFLOW_WWW_USER_PASSWORD=${{ secrets._AIRFLOW_WWW_USER_PASSWORD }}" >> .env
          echo "AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${{ secrets.AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION }}" >> .env
          echo "AIRFLOW_UID=${{ secrets.AIRFLOW_UID }}" >> .env
          echo "AIRFLOW__CORE__EXECUTOR=${{ secrets.AIRFLOW__CORE__EXECUTOR }}" >> .env
          echo "AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${{ secrets.AIRFLOW__DATABASE__SQL_ALCHEMY_CONN }}" >> .env
          echo "DEV_MODE=${{ secrets.DEV_MODE }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_URI=${{ secrets.POSTGRES_URI }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "SQLALCHEMY_DATABASE_URI=${{ secrets.SQLALCHEMY_DATABASE_URI }}" >> .env

      - name: login to github packages
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/airflow
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push airboo postgres image
        uses: docker/build-push-action@v4
        with:
          context: services/etl
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-push-api, build-push-app, build-push-postgres, build-push-airflow]
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: deploy to linode
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-azc -i --delete"
          SOURCE: "docker-compose.prod.yaml"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          SCRIPT_AFTER: |
            cd ${{ secrets.REMOTE_TARGET }}
            docker compose -f docker-compose.prod.yaml down
            docker image prune -a -f
            docker compose -f docker-compose.prod.yaml up -d --build
