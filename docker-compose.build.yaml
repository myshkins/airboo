version: '3'

services:
  api:
    user: 1000:1000
    container_name: air_api
    build: ./services/api
    command: ./startup.sh
    ports:
      - 8100:8100
    volumes:
      - ./services/api:/api
      - ./services/shared_models:/api/shared_models
    env_file: ./.env
    depends_on:
      postgres:
        condition: service_healthy

  app:
    user: 1000:1000
    container_name: app
    build: ./services/frontend
    environment:
      - NODE_ENV=development
    command: node serveApp.js
    ports:
      - 9000:9000
    volumes:
      - ./services/frontend/:/app
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    build: ./services/postgres
    environment:
      POSTGRES_MULTIPLE_DATABASES: "air_quality,airflow"
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 15s
      retries: 5
    restart: always

  redis:
    user: 1000:1000
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # `shared_model_common` and `airflow_common` are not deployed, but they are 
  # used to push the common airflow image to docker hub
  shared_model_common:
    image: kboiiz/air-quality-shared-models:latest
    build: ./services/shared_models

  airflow-common:
    image: kboiiz/air-quality-airflow:latest
    build: ./services/etl
    env_file: ./.env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    user: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./services/shared_models:/opt/airflow/dags/shared_models
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

