version: '3'

x-airflow-common:
  &airflow-common
  env_file: ./.env
  volumes:
    - ./services/etl/dags:/opt/airflow/dags
    - ./services/etl/logs:/opt/airflow/logs
    - ./services/shared_models:/opt/airflow/dags/shared_models

services:
  api:
    profiles: ["api", "full", "debug", "pushable", "test"]
    user: 1000:1000
    container_name: air_api
    build: ./services/api
    command: ./startup.sh
    ports:
      - 8100:8100
    volumes:
      - ./services/api:/api
      - ./services/shared_models:/api/shared_models
    env_file: ./.env
    depends_on:
      postgres:
        condition: service_healthy

  app:
    profiles: ["air_app", "full", "debug", "pushable", "test"]
    user: 1000:1000
    container_name: app
    build: ./services/frontend
    environment:
      - NODE_ENV=development
    command: node serveApp.js
    ports:
      - 9000:9000
    volumes:
      - ./services/frontend/:/app
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    profiles: ["air_app", "api", "full", "debug", "pushable", "test"]
    build: ./services/postgres
    environment:
      POSTGRES_MULTIPLE_DATABASES: "air_quality,airflow"
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 15s
      retries: 5
    restart: always

  redis:
    profiles: ["airflow", "full", "debug", "pushable"]
    user: 1000:1000
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # `shared_model_common` and `airflow_common` are not deployed, but they are 
  # used to push the common airflow image to docker hub
  shared_model_common:
    profiles: ["pushable"]
    image: kboiiz/air-quality-shared-models:latest
    build: ./services/shared_models
  airflow-common:
    image: kboiiz/air-quality-airflow:latest
    profiles: ["pushable"]
    build: ./services/etl
    env_file: ./.env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    user: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./services/shared_models:/opt/airflow/dags/shared_models
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
  
  airflow-webserver:
    profiles: ["airflow", "full", "debug", "pushable"]
    build: ./services/etl
    command: webserver
    <<: *airflow-common
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    profiles: ["airflow", "full", "debug", "pushable"]
    build: ./services/etl
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    profiles: ["airflow", "full", "debug", "pushable"]
    build: ./services/etl
    <<: *airflow-common
    command: celery worker
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    profiles: ["airflow", "full", "debug", "pushable"]
    build: ./services/etl
    <<: *airflow-common
    command: version
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  airflow-cli:
    profiles: ["airflow", "full", "debug"]
    build: ./services/etl
    extends: airflow-common
    environment:
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
  airflow_logs: